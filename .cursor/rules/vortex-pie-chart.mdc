---
description:
globs:
alwaysApply: false
---
# Vortex Pie Chart Component

This document details the implementation of the unified Vortex pie chart component which handles both token allocation and fee distribution visualizations.

## Component Structure

- [VortexPieChart.tsx](mdc:src/components/rewards/vortex/VortexPieChart.tsx) - Core chart component with rendering logic
- Should receive data and configuration as props rather than fetching data directly
- Uses Highcharts for the actual chart rendering

## Supported Visualization Modes

### Token Allocation Mode
- Visualizes token distribution in the Vortex pool
- Shows percentage of total value allocated to each token
- Colors correspond to tokens

### Fee Distribution Mode
- Visualizes how fees are distributed across trading pairs
- Two sub-modes:
  1. Global distribution (all pairs)
  2. Token-specific distribution (pairs for a specific token)
- Colors represent different trading pairs

## Chart Configuration

Chart configuration is generated by the data hooks and passed to the component:

```typescript
// Configuration pattern
const options = {
  chart: {
    type: 'pie',
    backgroundColor: 'transparent',
  },
  series: [{
    name: 'Distribution',
    data: [
      { name: 'Item 1', y: 40, color: '#abc123' },
      { name: 'Item 2', y: 60, color: '#def456' },
    ]
  }],
  // ...other Highcharts options
};
```

## Center Content

- The pie chart has a "donut hole" center that can display contextual information
- Center content is passed as a React component via `centerElement` prop
- Different center content is displayed based on current mode:
  - Token allocation: Shows total value
  - Fee distribution: Shows distribution title and context

## Mode Switching

- Mode switching is controlled by parent component
- The pie chart itself is agnostic to what type of data it's displaying
- Only receives options and renders accordingly

## Implementation Guidelines

1. Keep data fetching and processing outside the component
2. Pass prepared configuration objects to the chart
3. Handle layout and responsiveness in the component
4. Use the same chart for different data visualizations
5. When showing fee distributions, include actual fee values in tooltips
